// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bind_data generated by go-bindata.// sources:
// scripts/start_lotus.sh
// scripts/start_miner.sh
// scripts/start_worker.sh
package bind_data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsStart_lotusSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\xe2\x52\x56\x56\x50\x31\x52\x78\x36\x63\xfd\xb3\xe9\x4b\x9f\xee\x9f\xce\xc5\x95\x9a\x9c\x91\xaf\xa0\xa4\x62\xa8\xc4\xc5\x95\x93\x5f\x52\x5a\xac\x90\x92\x98\x9a\x9b\x9f\xa7\x60\x67\x07\x12\x54\x30\xb2\x53\x33\x54\x50\xe3\x02\x04\x00\x00\xff\xff\xdd\xc0\x2d\x31\x4c\x00\x00\x00")

func scriptsStart_lotusShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsStart_lotusSh,
		"scripts/start_lotus.sh",
	)
}

func scriptsStart_lotusSh() (*asset, error) {
	bytes, err := scriptsStart_lotusShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/start_lotus.sh", size: 76, mode: os.FileMode(484), modTime: time.Unix(1598253753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsStart_minerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\xe2\x52\x56\x56\x50\x31\x52\x78\x36\x63\xfd\xb3\xe9\x4b\x9f\xee\x9f\xce\x95\x9a\x9c\x91\xaf\xa0\xa4\x62\xa8\xc4\x95\x97\x9f\x51\x5a\xa0\x90\x93\x5f\x52\x5a\xac\x9b\x9b\x99\x97\x5a\xa4\x50\x54\x9a\xa7\x60\x67\xa7\xa4\x62\xa4\xa4\x60\x64\xa7\x66\xa8\xa0\xc6\x05\x08\x00\x00\xff\xff\xbb\x91\xeb\x39\x53\x00\x00\x00")

func scriptsStart_minerShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsStart_minerSh,
		"scripts/start_miner.sh",
	)
}

func scriptsStart_minerSh() (*asset, error) {
	bytes, err := scriptsStart_minerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/start_miner.sh", size: 83, mode: os.FileMode(484), modTime: time.Unix(1598253059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsStart_workerSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc7\xbb\xad\xc2\x30\x14\x06\xe0\xde\x53\xfc\x37\x39\x4a\x77\x14\xc5\xf7\x45\xe3\xec\x92\xc7\x91\x62\x91\xd8\x96\x1d\xc3\x28\x61\x01\x6a\x46\x60\x1a\x32\x07\x05\x14\x74\xdf\x57\x7e\xd5\x39\xc5\xba\xb7\xae\x16\x77\x42\xdf\xa5\x49\xa9\xb2\x04\x69\xec\x97\xdb\xbe\x5d\x1f\xf7\x4d\xc9\x30\x79\x14\xd4\x14\xca\xf9\x29\x07\xcc\x7e\xcd\x89\xcf\x3e\x1e\x25\x82\xdf\xe0\x28\xc1\x1b\xd2\x88\xd9\x81\x79\xb6\x69\x15\x67\xe8\x1b\xcc\xdd\x38\x06\x2b\x83\x18\xfa\x01\x73\x88\x32\xf8\x65\xb1\x6b\x63\xe8\xf7\xf3\xda\xd0\x1f\x98\x5f\x31\xf4\x8f\xb6\xa5\x03\x74\x5b\x35\xa8\xd4\x33\x00\x00\xff\xff\x43\xd8\x25\x54\xa9\x00\x00\x00")

func scriptsStart_workerShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsStart_workerSh,
		"scripts/start_worker.sh",
	)
}

func scriptsStart_workerSh() (*asset, error) {
	bytes, err := scriptsStart_workerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/start_worker.sh", size: 169, mode: os.FileMode(484), modTime: time.Unix(1598253399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/start_lotus.sh":  scriptsStart_lotusSh,
	"scripts/start_miner.sh":  scriptsStart_minerSh,
	"scripts/start_worker.sh": scriptsStart_workerSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"start_lotus.sh":  &bintree{scriptsStart_lotusSh, map[string]*bintree{}},
		"start_miner.sh":  &bintree{scriptsStart_minerSh, map[string]*bintree{}},
		"start_worker.sh": &bintree{scriptsStart_workerSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
